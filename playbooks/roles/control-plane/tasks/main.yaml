- name: 이미 쿠버네티스 클러스터가 구성되어 있는지 확인
  stat:
    path: "{{ kube_config_dir }}/kubelet.conf"
    get_attributes: no
    get_checksum: no
    get_mime: no
  register: kubelet_conf

- name: 이미 join 된 컨트롤 플레인 확인 및 first_kube_control_plane 변수 설정
  import_tasks: define-first-kube-control.yaml
  # when: kubelet_conf.stat.exists

- name: SANs 설정
  set_fact:
    apiserver_sans: "{{ (sans_base + groups['master'] + sans_access_ip + sans_ip + sans_hostname) | unique }}"
  vars:
    sans_base:
      - "kubernetes"
      - "kubernetes.default"
      - "kubernetes.default.svc"
      # - "kubernetes.default.svc.{{ dns_domain }}"
      - "{{ kube_apiserver_ip }}"
      - "localhost"
      - "127.0.0.1"
    # sans_lb: "{{ [apiserver_loadbalancer_domain_name] if apiserver_loadbalancer_domain_name is defined else [] }}"
    # sans_lb_ip: "{{ [loadbalancer_apiserver.address] if loadbalancer_apiserver is defined and loadbalancer_apiserver.address is defined else [] }}"
    # sans_supp: "{{ supplementary_addresses_in_ssl_keys if supplementary_addresses_in_ssl_keys is defined else [] }}"
    sans_access_ip: "{{ groups['master'] | map('extract', hostvars, 'access_ip') | list | select('defined') | list }}"
    sans_ip: "{{ groups['master'] | map('extract', hostvars, 'ip') | list | select('defined') | list }}"
    # sans_address: "{{ groups['master'] | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | list | select('defined') | list }}"
    # sans_override: "{{ [kube_override_hostname] if kube_override_hostname else [] }}"
    sans_hostname: "{{ groups['master'] | map('extract', hostvars, ['ansible_hostname']) | list | select('defined') | list }}"
    # sans_fqdn: "{{ groups['master'] | map('extract', hostvars, ['ansible_fqdn']) | list | select('defined') | list }}"
    # sans_kube_vip_address: "{{ [kube_vip_address] if kube_vip_address is defined and kube_vip_address else [] }}"
  tags: facts

- debug:
    msg: "{{ apiserver_sans }}"

- name: Kubeadm | Check apiserver.crt SANs
  vars:
    apiserver_ips: "{{ apiserver_sans | map('ansible.utils.ipaddr') | reject('equalto', False) | list }}"
    apiserver_hosts: "{{ apiserver_sans | difference(apiserver_ips) }}"
  when:
    - kubelet_conf.stat.exists
  block:
    - name: Kubeadm | Check apiserver.crt SAN IPs
      command:
        cmd: "openssl x509 -noout -in {{ kube_cert_dir }}/apiserver.crt -checkip {{ item }}"
      loop: "{{ apiserver_ips }}"
      register: apiserver_sans_ip_check
      changed_when: apiserver_sans_ip_check.stdout is not search('does match certificate')
    - name: Kubeadm | Check apiserver.crt SAN hosts
      command:
        cmd: "openssl x509 -noout -in {{ kube_cert_dir }}/apiserver.crt -checkhost {{ item }}"
      loop: "{{ apiserver_hosts }}"
      register: apiserver_sans_host_check
      changed_when: apiserver_sans_host_check.stdout is not search('does match certificate')


- name: Kubeadm | regenerate apiserver cert 1/2
  file:
    state: absent
    path: "{{ kube_cert_dir }}/{{ item }}"
  with_items:
    - apiserver.crt
    - apiserver.key
  when:
    - kubelet_conf.stat.exists
    - apiserver_sans_ip_check.changed or apiserver_sans_host_check.changed


- name: Kubeadm | regenerate apiserver cert 2/2
  command: >-
    {{ bin_dir }}/kubeadm
    init phase certs apiserver
    --config=/tmp/kubeadm-config.yaml
  when:
    - kubelet_conf.stat.exists
    - apiserver_sans_ip_check.changed or apiserver_sans_host_check.changed


- name: 부트스트랩 토큰 재발급
  shell: >-
    {{ bin_dir }}/kubeadm --kubeconfig {{ kube_config_dir }}/admin.conf token delete {{ bootstrap_token }} || :;
    {{ bin_dir }}/kubeadm --kubeconfig {{ kube_config_dir }}/admin.conf token create {{ bootstrap_token }} --ttl 30m
  changed_when: false
  when:
    - inventory_hostname == first_kube_control_plane
    - kubelet_conf.stat.exists

- name: kubeadm config 파일 복사
  copy:
    src: "../../../configs/utm/master.yaml"
    dest: "/tmp/kubeadm-config.yaml"
    mode: 0644
  when: not kubelet_conf.stat.exists
- debug: var=ansible_env.PATH

# kubelet 서비스 임시 중지
- name: kubelet 서비스 임시 중지
  service:
    name: kubelet
    state: stopped
    enabled: yes
  when: not kubelet_conf.stat.exists

- name: 첫번째 Control Plane 노드 kubeadm init 실행
  command: "/usr/local/bin/kubeadm init --upload-certs --config /tmp/kubeadm-config.yaml"
  register: kubeadm_init_result
  environment: 
    PATH: "{{ bin_dir }}:{{ ansible_env.PATH }}"
  when: not kubelet_conf.stat.exists and inventory_hostname == first_kube_control_plane

# - name: kubeadm certificate key 설정
#   set_fact:
#     kubeadm_certificate_key: "{{ item | regex_search('--certificate-key ([^ ]+)', '\\1') | first }}"
#   with_items: "{{ hostvars[groups['master'][0]]['kubeadm_init_result'].stdout_lines | default([]) }}"
#   when:
#     - kubeadm_certificate_key is not defined
#     - (item | trim) is match('.*--certificate-key.*')

- name: 다른 contron plane 노드 join
  include_tasks: join-other-control-plane.yaml

- name: kube config 디렉터리 생성
  file:
    path: "{{ ansible_env.HOME | default('/root') }}/.kube"
    mode: "0700"
    state: directory

- name: admin kube config 복사
  copy:
    src: "{{ kube_config_dir }}/admin.conf"
    dest: "{{ ansible_env.HOME | default('/root') }}/.kube/config"
    remote_src: yes
    mode: "0600"
    backup: yes
